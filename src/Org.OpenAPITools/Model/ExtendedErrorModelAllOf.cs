/*
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed messages are refunded.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExtendedErrorModelAllOf
    /// </summary>
    [DataContract(Name = "ExtendedErrorModel_allOf")]
    public partial class ExtendedErrorModelAllOf : IEquatable<ExtendedErrorModelAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtendedErrorModelAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExtendedErrorModelAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtendedErrorModelAllOf" /> class.
        /// </summary>
        /// <param name="errorCode">Numeric code used to identify the error. Integer. (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="permanent">permanent.</param>
        public ExtendedErrorModelAllOf(decimal errorCode = default(decimal), string status = default(string), bool permanent = default(bool))
        {
            this.ErrorCode = errorCode;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ExtendedErrorModelAllOf and cannot be null");
            }
            this.Status = status;
            this.Permanent = permanent;
        }

        /// <summary>
        /// Numeric code used to identify the error. Integer.
        /// </summary>
        /// <value>Numeric code used to identify the error. Integer.</value>
        [DataMember(Name = "errorCode", IsRequired = true, EmitDefaultValue = true)]
        public decimal ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Permanent
        /// </summary>
        [DataMember(Name = "permanent", EmitDefaultValue = true)]
        public bool Permanent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtendedErrorModelAllOf {\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Permanent: ").Append(Permanent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtendedErrorModelAllOf);
        }

        /// <summary>
        /// Returns true if ExtendedErrorModelAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtendedErrorModelAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtendedErrorModelAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ErrorCode == input.ErrorCode ||
                    this.ErrorCode.Equals(input.ErrorCode)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Permanent == input.Permanent ||
                    this.Permanent.Equals(input.Permanent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Permanent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
