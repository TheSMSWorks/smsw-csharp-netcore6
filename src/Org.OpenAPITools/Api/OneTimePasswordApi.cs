/*
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@thesmsworks.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOneTimePasswordApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an OTP by it&#39;s message ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the OTP you would like returned</param>
        /// <returns>OTPVerifyResponse</returns>
        OTPVerifyResponse OtpMessageidGet (string messageid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an OTP by it&#39;s message ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the OTP you would like returned</param>
        /// <returns>ApiResponse of OTPVerifyResponse</returns>
        ApiResponse<OTPVerifyResponse> OtpMessageidGetWithHttpInfo (string messageid);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate and send a One-Time Password
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otp">OTP properties</param>
        /// <returns>OTPResponse</returns>
        OTPResponse OtpSendPost (OTP otp);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate and send a One-Time Password
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otp">OTP properties</param>
        /// <returns>ApiResponse of OTPResponse</returns>
        ApiResponse<OTPResponse> OtpSendPostWithHttpInfo (OTP otp);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify a One-Time Password
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passcode">One-Time Password</param>
        /// <returns>OTPVerifyResponse</returns>
        OTPVerifyResponse OtpVerifyPost (OTPVerify passcode);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify a One-Time Password
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passcode">One-Time Password</param>
        /// <returns>ApiResponse of OTPVerifyResponse</returns>
        ApiResponse<OTPVerifyResponse> OtpVerifyPostWithHttpInfo (OTPVerify passcode);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an OTP by it&#39;s message ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the OTP you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OTPVerifyResponse</returns>
        System.Threading.Tasks.Task<OTPVerifyResponse> OtpMessageidGetAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve an OTP by it&#39;s message ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the OTP you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OTPVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OTPVerifyResponse>> OtpMessageidGetWithHttpInfoAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate and send a One-Time Password
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otp">OTP properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OTPResponse</returns>
        System.Threading.Tasks.Task<OTPResponse> OtpSendPostAsync (OTP otp, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate and send a One-Time Password
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otp">OTP properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OTPResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OTPResponse>> OtpSendPostWithHttpInfoAsync (OTP otp, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify a One-Time Password
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passcode">One-Time Password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OTPVerifyResponse</returns>
        System.Threading.Tasks.Task<OTPVerifyResponse> OtpVerifyPostAsync (OTPVerify passcode, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify a One-Time Password
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passcode">One-Time Password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OTPVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OTPVerifyResponse>> OtpVerifyPostWithHttpInfoAsync (OTPVerify passcode, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OneTimePasswordApi : IOneTimePasswordApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OneTimePasswordApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OneTimePasswordApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OneTimePasswordApi"/> class
        /// </summary>
        /// <returns></returns>
        public OneTimePasswordApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OneTimePasswordApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OneTimePasswordApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieve an OTP by it&#39;s message ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the OTP you would like returned</param>
        /// <returns>OTPVerifyResponse</returns>
        public OTPVerifyResponse OtpMessageidGet (string messageid)
        {
             ApiResponse<OTPVerifyResponse> localVarResponse = OtpMessageidGetWithHttpInfo(messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve an OTP by it&#39;s message ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the OTP you would like returned</param>
        /// <returns>ApiResponse of OTPVerifyResponse</returns>
        public ApiResponse<OTPVerifyResponse> OtpMessageidGetWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling OneTimePasswordApi->OtpMessageidGet");

            var localVarPath = "/otp/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OtpMessageidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OTPVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OTPVerifyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OTPVerifyResponse)));
        }

        /// <summary>
        ///  Retrieve an OTP by it&#39;s message ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the OTP you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OTPVerifyResponse</returns>
        public async System.Threading.Tasks.Task<OTPVerifyResponse> OtpMessageidGetAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OTPVerifyResponse> localVarResponse = await OtpMessageidGetWithHttpInfoAsync(messageid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve an OTP by it&#39;s message ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the OTP you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OTPVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OTPVerifyResponse>> OtpMessageidGetWithHttpInfoAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling OneTimePasswordApi->OtpMessageidGet");

            var localVarPath = "/otp/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OtpMessageidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OTPVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OTPVerifyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OTPVerifyResponse)));
        }

        /// <summary>
        ///  Generate and send a One-Time Password
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otp">OTP properties</param>
        /// <returns>OTPResponse</returns>
        public OTPResponse OtpSendPost (OTP otp)
        {
             ApiResponse<OTPResponse> localVarResponse = OtpSendPostWithHttpInfo(otp);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Generate and send a One-Time Password
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otp">OTP properties</param>
        /// <returns>ApiResponse of OTPResponse</returns>
        public ApiResponse<OTPResponse> OtpSendPostWithHttpInfo (OTP otp)
        {
            // verify the required parameter 'otp' is set
            if (otp == null)
                throw new ApiException(400, "Missing required parameter 'otp' when calling OneTimePasswordApi->OtpSendPost");

            var localVarPath = "/otp/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (otp != null && otp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(otp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = otp; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OtpSendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OTPResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OTPResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OTPResponse)));
        }

        /// <summary>
        ///  Generate and send a One-Time Password
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otp">OTP properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OTPResponse</returns>
        public async System.Threading.Tasks.Task<OTPResponse> OtpSendPostAsync (OTP otp, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OTPResponse> localVarResponse = await OtpSendPostWithHttpInfoAsync(otp, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Generate and send a One-Time Password
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otp">OTP properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OTPResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OTPResponse>> OtpSendPostWithHttpInfoAsync (OTP otp, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'otp' is set
            if (otp == null)
                throw new ApiException(400, "Missing required parameter 'otp' when calling OneTimePasswordApi->OtpSendPost");

            var localVarPath = "/otp/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (otp != null && otp.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(otp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = otp; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OtpSendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OTPResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OTPResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OTPResponse)));
        }

        /// <summary>
        ///  Verify a One-Time Password
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passcode">One-Time Password</param>
        /// <returns>OTPVerifyResponse</returns>
        public OTPVerifyResponse OtpVerifyPost (OTPVerify passcode)
        {
             ApiResponse<OTPVerifyResponse> localVarResponse = OtpVerifyPostWithHttpInfo(passcode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify a One-Time Password
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passcode">One-Time Password</param>
        /// <returns>ApiResponse of OTPVerifyResponse</returns>
        public ApiResponse<OTPVerifyResponse> OtpVerifyPostWithHttpInfo (OTPVerify passcode)
        {
            // verify the required parameter 'passcode' is set
            if (passcode == null)
                throw new ApiException(400, "Missing required parameter 'passcode' when calling OneTimePasswordApi->OtpVerifyPost");

            var localVarPath = "/otp/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passcode != null && passcode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(passcode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = passcode; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OtpVerifyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OTPVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OTPVerifyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OTPVerifyResponse)));
        }

        /// <summary>
        ///  Verify a One-Time Password
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passcode">One-Time Password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OTPVerifyResponse</returns>
        public async System.Threading.Tasks.Task<OTPVerifyResponse> OtpVerifyPostAsync (OTPVerify passcode, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OTPVerifyResponse> localVarResponse = await OtpVerifyPostWithHttpInfoAsync(passcode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Verify a One-Time Password
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="passcode">One-Time Password</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OTPVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OTPVerifyResponse>> OtpVerifyPostWithHttpInfoAsync (OTPVerify passcode, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'passcode' is set
            if (passcode == null)
                throw new ApiException(400, "Missing required parameter 'passcode' when calling OneTimePasswordApi->OtpVerifyPost");

            var localVarPath = "/otp/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (passcode != null && passcode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(passcode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = passcode; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OtpVerifyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OTPVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OTPVerifyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OTPVerifyResponse)));
        }

    }
}
