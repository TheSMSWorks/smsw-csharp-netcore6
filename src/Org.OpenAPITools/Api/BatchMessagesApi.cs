/*
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@thesmsworks.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBatchMessagesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send a collection of unique SMS messages
        /// </summary>
        /// <remarks>
        /// Batches may contain up to 5000 messages at a time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messages">An array of messages</param>
        /// <returns>BatchMessageResponse</returns>
        BatchMessageResponse BatchAnyPost (Object messages);

        /// <summary>
        /// Send a collection of unique SMS messages
        /// </summary>
        /// <remarks>
        /// Batches may contain up to 5000 messages at a time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messages">An array of messages</param>
        /// <returns>ApiResponse of BatchMessageResponse</returns>
        ApiResponse<BatchMessageResponse> BatchAnyPostWithHttpInfo (Object messages);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all messages with the given batch ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <returns>List&lt;MessageResponse&gt;</returns>
        List<MessageResponse> BatchBatchidGet (string batchid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all messages with the given batch ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <returns>ApiResponse of List&lt;MessageResponse&gt;</returns>
        ApiResponse<List<MessageResponse>> BatchBatchidGetWithHttpInfo (string batchid);
        /// <summary>
        /// Schedule a batch of SMS messages
        /// </summary>
        /// <remarks>
        /// Schedules a batch of SMS messages to be sent at the date/time you specify
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ScheduledBatchResponse</returns>
        ScheduledBatchResponse BatchSchedulePost (BatchMessage smsMessage);

        /// <summary>
        /// Schedule a batch of SMS messages
        /// </summary>
        /// <remarks>
        /// Schedules a batch of SMS messages to be sent at the date/time you specify
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of ScheduledBatchResponse</returns>
        ApiResponse<ScheduledBatchResponse> BatchSchedulePostWithHttpInfo (BatchMessage smsMessage);
        /// <summary>
        /// Send an SMS message to multiple recipients
        /// </summary>
        /// <remarks>
        /// Batches may contain up to 5000 messages at a time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>BatchMessageResponse</returns>
        BatchMessageResponse BatchSendPost (BatchMessage smsMessage);

        /// <summary>
        /// Send an SMS message to multiple recipients
        /// </summary>
        /// <remarks>
        /// Batches may contain up to 5000 messages at a time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of BatchMessageResponse</returns>
        ApiResponse<BatchMessageResponse> BatchSendPostWithHttpInfo (BatchMessage smsMessage);
        /// <summary>
        /// Cancel a scheduled batch
        /// </summary>
        /// <remarks>
        /// Cancels a batch of scheduled messages using the supplied batch ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <returns>CancelledMessageResponse</returns>
        CancelledMessageResponse BatchesScheduleBatchidDelete (string batchid);

        /// <summary>
        /// Cancel a scheduled batch
        /// </summary>
        /// <remarks>
        /// Cancels a batch of scheduled messages using the supplied batch ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <returns>ApiResponse of CancelledMessageResponse</returns>
        ApiResponse<CancelledMessageResponse> BatchesScheduleBatchidDeleteWithHttpInfo (string batchid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send a collection of unique SMS messages
        /// </summary>
        /// <remarks>
        /// Batches may contain up to 5000 messages at a time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messages">An array of messages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BatchMessageResponse</returns>
        System.Threading.Tasks.Task<BatchMessageResponse> BatchAnyPostAsync (Object messages, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a collection of unique SMS messages
        /// </summary>
        /// <remarks>
        /// Batches may contain up to 5000 messages at a time.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messages">An array of messages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BatchMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchMessageResponse>> BatchAnyPostWithHttpInfoAsync (Object messages, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all messages with the given batch ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MessageResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MessageResponse>> BatchBatchidGetAsync (string batchid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all messages with the given batch ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MessageResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MessageResponse>>> BatchBatchidGetWithHttpInfoAsync (string batchid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Schedule a batch of SMS messages
        /// </summary>
        /// <remarks>
        /// Schedules a batch of SMS messages to be sent at the date/time you specify
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScheduledBatchResponse</returns>
        System.Threading.Tasks.Task<ScheduledBatchResponse> BatchSchedulePostAsync (BatchMessage smsMessage, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Schedule a batch of SMS messages
        /// </summary>
        /// <remarks>
        /// Schedules a batch of SMS messages to be sent at the date/time you specify
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScheduledBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledBatchResponse>> BatchSchedulePostWithHttpInfoAsync (BatchMessage smsMessage, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send an SMS message to multiple recipients
        /// </summary>
        /// <remarks>
        /// Batches may contain up to 5000 messages at a time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BatchMessageResponse</returns>
        System.Threading.Tasks.Task<BatchMessageResponse> BatchSendPostAsync (BatchMessage smsMessage, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send an SMS message to multiple recipients
        /// </summary>
        /// <remarks>
        /// Batches may contain up to 5000 messages at a time
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BatchMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchMessageResponse>> BatchSendPostWithHttpInfoAsync (BatchMessage smsMessage, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel a scheduled batch
        /// </summary>
        /// <remarks>
        /// Cancels a batch of scheduled messages using the supplied batch ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CancelledMessageResponse</returns>
        System.Threading.Tasks.Task<CancelledMessageResponse> BatchesScheduleBatchidDeleteAsync (string batchid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel a scheduled batch
        /// </summary>
        /// <remarks>
        /// Cancels a batch of scheduled messages using the supplied batch ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CancelledMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelledMessageResponse>> BatchesScheduleBatchidDeleteWithHttpInfoAsync (string batchid, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BatchMessagesApi : IBatchMessagesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchMessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BatchMessagesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchMessagesApi"/> class
        /// </summary>
        /// <returns></returns>
        public BatchMessagesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BatchMessagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BatchMessagesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send a collection of unique SMS messages Batches may contain up to 5000 messages at a time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messages">An array of messages</param>
        /// <returns>BatchMessageResponse</returns>
        public BatchMessageResponse BatchAnyPost (Object messages)
        {
             ApiResponse<BatchMessageResponse> localVarResponse = BatchAnyPostWithHttpInfo(messages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a collection of unique SMS messages Batches may contain up to 5000 messages at a time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messages">An array of messages</param>
        /// <returns>ApiResponse of BatchMessageResponse</returns>
        public ApiResponse<BatchMessageResponse> BatchAnyPostWithHttpInfo (Object messages)
        {
            // verify the required parameter 'messages' is set
            if (messages == null)
                throw new ApiException(400, "Missing required parameter 'messages' when calling BatchMessagesApi->BatchAnyPost");

            var localVarPath = "/batch/any";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messages != null && messages.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messages); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messages; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchAnyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchMessageResponse)));
        }

        /// <summary>
        /// Send a collection of unique SMS messages Batches may contain up to 5000 messages at a time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messages">An array of messages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BatchMessageResponse</returns>
        public async System.Threading.Tasks.Task<BatchMessageResponse> BatchAnyPostAsync (Object messages, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BatchMessageResponse> localVarResponse = await BatchAnyPostWithHttpInfoAsync(messages, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a collection of unique SMS messages Batches may contain up to 5000 messages at a time.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messages">An array of messages</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BatchMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchMessageResponse>> BatchAnyPostWithHttpInfoAsync (Object messages, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'messages' is set
            if (messages == null)
                throw new ApiException(400, "Missing required parameter 'messages' when calling BatchMessagesApi->BatchAnyPost");

            var localVarPath = "/batch/any";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messages != null && messages.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messages); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messages; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchAnyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchMessageResponse)));
        }

        /// <summary>
        ///  Retrieve all messages with the given batch ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <returns>List&lt;MessageResponse&gt;</returns>
        public List<MessageResponse> BatchBatchidGet (string batchid)
        {
             ApiResponse<List<MessageResponse>> localVarResponse = BatchBatchidGetWithHttpInfo(batchid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all messages with the given batch ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <returns>ApiResponse of List&lt;MessageResponse&gt;</returns>
        public ApiResponse<List<MessageResponse>> BatchBatchidGetWithHttpInfo (string batchid)
        {
            // verify the required parameter 'batchid' is set
            if (batchid == null)
                throw new ApiException(400, "Missing required parameter 'batchid' when calling BatchMessagesApi->BatchBatchidGet");

            var localVarPath = "/batch/{batchid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchid != null) localVarPathParams.Add("batchid", this.Configuration.ApiClient.ParameterToString(batchid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchBatchidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MessageResponse>)));
        }

        /// <summary>
        ///  Retrieve all messages with the given batch ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MessageResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MessageResponse>> BatchBatchidGetAsync (string batchid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MessageResponse>> localVarResponse = await BatchBatchidGetWithHttpInfoAsync(batchid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all messages with the given batch ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MessageResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MessageResponse>>> BatchBatchidGetWithHttpInfoAsync (string batchid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'batchid' is set
            if (batchid == null)
                throw new ApiException(400, "Missing required parameter 'batchid' when calling BatchMessagesApi->BatchBatchidGet");

            var localVarPath = "/batch/{batchid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchid != null) localVarPathParams.Add("batchid", this.Configuration.ApiClient.ParameterToString(batchid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchBatchidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MessageResponse>)));
        }

        /// <summary>
        /// Schedule a batch of SMS messages Schedules a batch of SMS messages to be sent at the date/time you specify
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ScheduledBatchResponse</returns>
        public ScheduledBatchResponse BatchSchedulePost (BatchMessage smsMessage)
        {
             ApiResponse<ScheduledBatchResponse> localVarResponse = BatchSchedulePostWithHttpInfo(smsMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule a batch of SMS messages Schedules a batch of SMS messages to be sent at the date/time you specify
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of ScheduledBatchResponse</returns>
        public ApiResponse<ScheduledBatchResponse> BatchSchedulePostWithHttpInfo (BatchMessage smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling BatchMessagesApi->BatchSchedulePost");

            var localVarPath = "/batch/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchSchedulePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScheduledBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledBatchResponse)));
        }

        /// <summary>
        /// Schedule a batch of SMS messages Schedules a batch of SMS messages to be sent at the date/time you specify
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScheduledBatchResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledBatchResponse> BatchSchedulePostAsync (BatchMessage smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ScheduledBatchResponse> localVarResponse = await BatchSchedulePostWithHttpInfoAsync(smsMessage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Schedule a batch of SMS messages Schedules a batch of SMS messages to be sent at the date/time you specify
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScheduledBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduledBatchResponse>> BatchSchedulePostWithHttpInfoAsync (BatchMessage smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling BatchMessagesApi->BatchSchedulePost");

            var localVarPath = "/batch/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchSchedulePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScheduledBatchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledBatchResponse)));
        }

        /// <summary>
        /// Send an SMS message to multiple recipients Batches may contain up to 5000 messages at a time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>BatchMessageResponse</returns>
        public BatchMessageResponse BatchSendPost (BatchMessage smsMessage)
        {
             ApiResponse<BatchMessageResponse> localVarResponse = BatchSendPostWithHttpInfo(smsMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send an SMS message to multiple recipients Batches may contain up to 5000 messages at a time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of BatchMessageResponse</returns>
        public ApiResponse<BatchMessageResponse> BatchSendPostWithHttpInfo (BatchMessage smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling BatchMessagesApi->BatchSendPost");

            var localVarPath = "/batch/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchSendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchMessageResponse)));
        }

        /// <summary>
        /// Send an SMS message to multiple recipients Batches may contain up to 5000 messages at a time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BatchMessageResponse</returns>
        public async System.Threading.Tasks.Task<BatchMessageResponse> BatchSendPostAsync (BatchMessage smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BatchMessageResponse> localVarResponse = await BatchSendPostWithHttpInfoAsync(smsMessage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send an SMS message to multiple recipients Batches may contain up to 5000 messages at a time
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BatchMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchMessageResponse>> BatchSendPostWithHttpInfoAsync (BatchMessage smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling BatchMessagesApi->BatchSendPost");

            var localVarPath = "/batch/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchSendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BatchMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchMessageResponse)));
        }

        /// <summary>
        /// Cancel a scheduled batch Cancels a batch of scheduled messages using the supplied batch ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <returns>CancelledMessageResponse</returns>
        public CancelledMessageResponse BatchesScheduleBatchidDelete (string batchid)
        {
             ApiResponse<CancelledMessageResponse> localVarResponse = BatchesScheduleBatchidDeleteWithHttpInfo(batchid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a scheduled batch Cancels a batch of scheduled messages using the supplied batch ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <returns>ApiResponse of CancelledMessageResponse</returns>
        public ApiResponse<CancelledMessageResponse> BatchesScheduleBatchidDeleteWithHttpInfo (string batchid)
        {
            // verify the required parameter 'batchid' is set
            if (batchid == null)
                throw new ApiException(400, "Missing required parameter 'batchid' when calling BatchMessagesApi->BatchesScheduleBatchidDelete");

            var localVarPath = "/batches/schedule/{batchid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchid != null) localVarPathParams.Add("batchid", this.Configuration.ApiClient.ParameterToString(batchid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchesScheduleBatchidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelledMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelledMessageResponse)));
        }

        /// <summary>
        /// Cancel a scheduled batch Cancels a batch of scheduled messages using the supplied batch ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CancelledMessageResponse</returns>
        public async System.Threading.Tasks.Task<CancelledMessageResponse> BatchesScheduleBatchidDeleteAsync (string batchid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CancelledMessageResponse> localVarResponse = await BatchesScheduleBatchidDeleteWithHttpInfoAsync(batchid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a scheduled batch Cancels a batch of scheduled messages using the supplied batch ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchid">The ID of the batch you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CancelledMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelledMessageResponse>> BatchesScheduleBatchidDeleteWithHttpInfoAsync (string batchid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'batchid' is set
            if (batchid == null)
                throw new ApiException(400, "Missing required parameter 'batchid' when calling BatchMessagesApi->BatchesScheduleBatchidDelete");

            var localVarPath = "/batches/schedule/{batchid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchid != null) localVarPathParams.Add("batchid", this.Configuration.ApiClient.ParameterToString(batchid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchesScheduleBatchidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelledMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelledMessageResponse)));
        }

    }
}
