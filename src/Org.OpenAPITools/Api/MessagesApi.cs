/*
 * The SMS Works API
 *
 * The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.
 *
 * The version of the OpenAPI document: 1.11.0
 * Contact: support@thesmsworks.co.uk
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send a binary SMS message
        /// </summary>
        /// <remarks>
        /// Sends an SMS Message in Binary format. This can be used to send files and data to devices that process binary content. Especially useful for Internet of Things (IoT). Message content should be encoded in hex pairs (e.g. &#39;65 54 74 73 6d 20 73 65 61 73 65 67 2e&#39;)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>SendMessageResponse</returns>
        SendMessageResponse BinarySendPost (Message smsMessage);

        /// <summary>
        /// Send a binary SMS message
        /// </summary>
        /// <remarks>
        /// Sends an SMS Message in Binary format. This can be used to send files and data to devices that process binary content. Especially useful for Internet of Things (IoT). Message content should be encoded in hex pairs (e.g. &#39;65 54 74 73 6d 20 73 65 61 73 65 67 2e&#39;)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        ApiResponse<SendMessageResponse> BinarySendPostWithHttpInfo (Message smsMessage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an SMS flash message
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>SendMessageResponse</returns>
        SendMessageResponse MessageFlashPost (Message smsMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an SMS flash message
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        ApiResponse<SendMessageResponse> MessageFlashPostWithHttpInfo (Message smsMessage);
        /// <summary>
        /// Schedule an SMS message
        /// </summary>
        /// <remarks>
        /// Schedules an SMS message to be sent at the date/time you specify
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>List&lt;ScheduledMessageResponse&gt;</returns>
        List<ScheduledMessageResponse> MessageSchedulePost (Message smsMessage);

        /// <summary>
        /// Schedule an SMS message
        /// </summary>
        /// <remarks>
        /// Schedules an SMS message to be sent at the date/time you specify
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of List&lt;ScheduledMessageResponse&gt;</returns>
        ApiResponse<List<ScheduledMessageResponse>> MessageSchedulePostWithHttpInfo (Message smsMessage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an SMS Message
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>SendMessageResponse</returns>
        SendMessageResponse MessageSendPost (Message smsMessage);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an SMS Message
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        ApiResponse<SendMessageResponse> MessageSendPostWithHttpInfo (Message smsMessage);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve failed messages matching your criteria
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>List&lt;MessageResponse&gt;</returns>
        List<MessageResponse> MessagesFailedPost (Query query);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve failed messages matching your criteria
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of List&lt;MessageResponse&gt;</returns>
        ApiResponse<List<MessageResponse>> MessagesFailedPostWithHttpInfo (Query query);
        /// <summary>
        /// Retrieve unread uncoming messages
        /// </summary>
        /// <remarks>
        /// Retrieve unread uncoming messages matching your criteria
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>List&lt;MessageResponse&gt;</returns>
        List<MessageResponse> MessagesInboxPost (Query query);

        /// <summary>
        /// Retrieve unread uncoming messages
        /// </summary>
        /// <remarks>
        /// Retrieve unread uncoming messages matching your criteria
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of List&lt;MessageResponse&gt;</returns>
        ApiResponse<List<MessageResponse>> MessagesInboxPostWithHttpInfo (Query query);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the message with the matching messageid
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>DeletedMessageResponse</returns>
        DeletedMessageResponse MessagesMessageidDelete (string messageid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the message with the matching messageid
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of DeletedMessageResponse</returns>
        ApiResponse<DeletedMessageResponse> MessagesMessageidDeleteWithHttpInfo (string messageid);
        /// <summary>
        /// Get message by messageid
        /// </summary>
        /// <remarks>
        /// Retrieve a delivery report by the message ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>MessageResponse</returns>
        MessageResponse MessagesMessageidGet (string messageid);

        /// <summary>
        /// Get message by messageid
        /// </summary>
        /// <remarks>
        /// Retrieve a delivery report by the message ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of MessageResponse</returns>
        ApiResponse<MessageResponse> MessagesMessageidGetWithHttpInfo (string messageid);
        /// <summary>
        /// Get messages matching your criteria
        /// </summary>
        /// <remarks>
        /// Retrieve up to 1000 messages matching criteria specified in the request
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>List&lt;MessageResponse&gt;</returns>
        List<MessageResponse> MessagesPost (Query query);

        /// <summary>
        /// Get messages matching your criteria
        /// </summary>
        /// <remarks>
        /// Retrieve up to 1000 messages matching criteria specified in the request
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of List&lt;MessageResponse&gt;</returns>
        ApiResponse<List<MessageResponse>> MessagesPostWithHttpInfo (Query query);
        /// <summary>
        /// Retrieve scheduled messages
        /// </summary>
        /// <remarks>
        /// Return a list of messages scheduled from your account, comprising any messages scheduled in the last 3 months and any scheduled to send in the future
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScheduledMessagesResponse</returns>
        ScheduledMessagesResponse MessagesScheduleGet ();

        /// <summary>
        /// Retrieve scheduled messages
        /// </summary>
        /// <remarks>
        /// Return a list of messages scheduled from your account, comprising any messages scheduled in the last 3 months and any scheduled to send in the future
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScheduledMessagesResponse</returns>
        ApiResponse<ScheduledMessagesResponse> MessagesScheduleGetWithHttpInfo ();
        /// <summary>
        /// Cancel scheduled SMS message
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled SMS message matching the provided messageid
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>CancelledMessageResponse</returns>
        CancelledMessageResponse MessagesScheduleMessageidDelete (string messageid);

        /// <summary>
        /// Cancel scheduled SMS message
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled SMS message matching the provided messageid
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of CancelledMessageResponse</returns>
        ApiResponse<CancelledMessageResponse> MessagesScheduleMessageidDeleteWithHttpInfo (string messageid);
        /// <summary>
        /// Volume of messages sent since midnight
        /// </summary>
        /// <remarks>
        /// Retrieve the number of messages sent since midnight last night
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MessageVolumeResponse</returns>
        MessageVolumeResponse MessagesVolumeGet ();

        /// <summary>
        /// Volume of messages sent since midnight
        /// </summary>
        /// <remarks>
        /// Retrieve the number of messages sent since midnight last night
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MessageVolumeResponse</returns>
        ApiResponse<MessageVolumeResponse> MessagesVolumeGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send a binary SMS message
        /// </summary>
        /// <remarks>
        /// Sends an SMS Message in Binary format. This can be used to send files and data to devices that process binary content. Especially useful for Internet of Things (IoT). Message content should be encoded in hex pairs (e.g. &#39;65 54 74 73 6d 20 73 65 61 73 65 67 2e&#39;)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendMessageResponse</returns>
        System.Threading.Tasks.Task<SendMessageResponse> BinarySendPostAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a binary SMS message
        /// </summary>
        /// <remarks>
        /// Sends an SMS Message in Binary format. This can be used to send files and data to devices that process binary content. Especially useful for Internet of Things (IoT). Message content should be encoded in hex pairs (e.g. &#39;65 54 74 73 6d 20 73 65 61 73 65 67 2e&#39;)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> BinarySendPostWithHttpInfoAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an SMS flash message
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendMessageResponse</returns>
        System.Threading.Tasks.Task<SendMessageResponse> MessageFlashPostAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an SMS flash message
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> MessageFlashPostWithHttpInfoAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Schedule an SMS message
        /// </summary>
        /// <remarks>
        /// Schedules an SMS message to be sent at the date/time you specify
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ScheduledMessageResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ScheduledMessageResponse>> MessageSchedulePostAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Schedule an SMS message
        /// </summary>
        /// <remarks>
        /// Schedules an SMS message to be sent at the date/time you specify
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledMessageResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScheduledMessageResponse>>> MessageSchedulePostWithHttpInfoAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an SMS Message
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendMessageResponse</returns>
        System.Threading.Tasks.Task<SendMessageResponse> MessageSendPostAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send an SMS Message
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> MessageSendPostWithHttpInfoAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve failed messages matching your criteria
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MessageResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MessageResponse>> MessagesFailedPostAsync (Query query, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve failed messages matching your criteria
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MessageResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MessageResponse>>> MessagesFailedPostWithHttpInfoAsync (Query query, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve unread uncoming messages
        /// </summary>
        /// <remarks>
        /// Retrieve unread uncoming messages matching your criteria
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MessageResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MessageResponse>> MessagesInboxPostAsync (Query query, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve unread uncoming messages
        /// </summary>
        /// <remarks>
        /// Retrieve unread uncoming messages matching your criteria
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MessageResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MessageResponse>>> MessagesInboxPostWithHttpInfoAsync (Query query, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the message with the matching messageid
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeletedMessageResponse</returns>
        System.Threading.Tasks.Task<DeletedMessageResponse> MessagesMessageidDeleteAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete the message with the matching messageid
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeletedMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedMessageResponse>> MessagesMessageidDeleteWithHttpInfoAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get message by messageid
        /// </summary>
        /// <remarks>
        /// Retrieve a delivery report by the message ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageResponse</returns>
        System.Threading.Tasks.Task<MessageResponse> MessagesMessageidGetAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get message by messageid
        /// </summary>
        /// <remarks>
        /// Retrieve a delivery report by the message ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageResponse>> MessagesMessageidGetWithHttpInfoAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get messages matching your criteria
        /// </summary>
        /// <remarks>
        /// Retrieve up to 1000 messages matching criteria specified in the request
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MessageResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MessageResponse>> MessagesPostAsync (Query query, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get messages matching your criteria
        /// </summary>
        /// <remarks>
        /// Retrieve up to 1000 messages matching criteria specified in the request
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MessageResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MessageResponse>>> MessagesPostWithHttpInfoAsync (Query query, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve scheduled messages
        /// </summary>
        /// <remarks>
        /// Return a list of messages scheduled from your account, comprising any messages scheduled in the last 3 months and any scheduled to send in the future
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScheduledMessagesResponse</returns>
        System.Threading.Tasks.Task<ScheduledMessagesResponse> MessagesScheduleGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve scheduled messages
        /// </summary>
        /// <remarks>
        /// Return a list of messages scheduled from your account, comprising any messages scheduled in the last 3 months and any scheduled to send in the future
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScheduledMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledMessagesResponse>> MessagesScheduleGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel scheduled SMS message
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled SMS message matching the provided messageid
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CancelledMessageResponse</returns>
        System.Threading.Tasks.Task<CancelledMessageResponse> MessagesScheduleMessageidDeleteAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel scheduled SMS message
        /// </summary>
        /// <remarks>
        /// Cancels a scheduled SMS message matching the provided messageid
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CancelledMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelledMessageResponse>> MessagesScheduleMessageidDeleteWithHttpInfoAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Volume of messages sent since midnight
        /// </summary>
        /// <remarks>
        /// Retrieve the number of messages sent since midnight last night
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageVolumeResponse</returns>
        System.Threading.Tasks.Task<MessageVolumeResponse> MessagesVolumeGetAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Volume of messages sent since midnight
        /// </summary>
        /// <remarks>
        /// Retrieve the number of messages sent since midnight last night
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageVolumeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageVolumeResponse>> MessagesVolumeGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagesApi : IMessagesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// </summary>
        /// <returns></returns>
        public MessagesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send a binary SMS message Sends an SMS Message in Binary format. This can be used to send files and data to devices that process binary content. Especially useful for Internet of Things (IoT). Message content should be encoded in hex pairs (e.g. &#39;65 54 74 73 6d 20 73 65 61 73 65 67 2e&#39;)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>SendMessageResponse</returns>
        public SendMessageResponse BinarySendPost (Message smsMessage)
        {
             ApiResponse<SendMessageResponse> localVarResponse = BinarySendPostWithHttpInfo(smsMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a binary SMS message Sends an SMS Message in Binary format. This can be used to send files and data to devices that process binary content. Especially useful for Internet of Things (IoT). Message content should be encoded in hex pairs (e.g. &#39;65 54 74 73 6d 20 73 65 61 73 65 67 2e&#39;)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        public ApiResponse<SendMessageResponse> BinarySendPostWithHttpInfo (Message smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->BinarySendPost");

            var localVarPath = "/binary/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BinarySendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        /// Send a binary SMS message Sends an SMS Message in Binary format. This can be used to send files and data to devices that process binary content. Especially useful for Internet of Things (IoT). Message content should be encoded in hex pairs (e.g. &#39;65 54 74 73 6d 20 73 65 61 73 65 67 2e&#39;)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendMessageResponse> BinarySendPostAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendMessageResponse> localVarResponse = await BinarySendPostWithHttpInfoAsync(smsMessage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a binary SMS message Sends an SMS Message in Binary format. This can be used to send files and data to devices that process binary content. Especially useful for Internet of Things (IoT). Message content should be encoded in hex pairs (e.g. &#39;65 54 74 73 6d 20 73 65 61 73 65 67 2e&#39;)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> BinarySendPostWithHttpInfoAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->BinarySendPost");

            var localVarPath = "/binary/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BinarySendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        ///  Send an SMS flash message
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>SendMessageResponse</returns>
        public SendMessageResponse MessageFlashPost (Message smsMessage)
        {
             ApiResponse<SendMessageResponse> localVarResponse = MessageFlashPostWithHttpInfo(smsMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Send an SMS flash message
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        public ApiResponse<SendMessageResponse> MessageFlashPostWithHttpInfo (Message smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->MessageFlashPost");

            var localVarPath = "/message/flash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessageFlashPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        ///  Send an SMS flash message
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendMessageResponse> MessageFlashPostAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendMessageResponse> localVarResponse = await MessageFlashPostWithHttpInfoAsync(smsMessage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Send an SMS flash message
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> MessageFlashPostWithHttpInfoAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->MessageFlashPost");

            var localVarPath = "/message/flash";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessageFlashPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        /// Schedule an SMS message Schedules an SMS message to be sent at the date/time you specify
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>List&lt;ScheduledMessageResponse&gt;</returns>
        public List<ScheduledMessageResponse> MessageSchedulePost (Message smsMessage)
        {
             ApiResponse<List<ScheduledMessageResponse>> localVarResponse = MessageSchedulePostWithHttpInfo(smsMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule an SMS message Schedules an SMS message to be sent at the date/time you specify
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of List&lt;ScheduledMessageResponse&gt;</returns>
        public ApiResponse<List<ScheduledMessageResponse>> MessageSchedulePostWithHttpInfo (Message smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->MessageSchedulePost");

            var localVarPath = "/message/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessageSchedulePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ScheduledMessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ScheduledMessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ScheduledMessageResponse>)));
        }

        /// <summary>
        /// Schedule an SMS message Schedules an SMS message to be sent at the date/time you specify
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;ScheduledMessageResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScheduledMessageResponse>> MessageSchedulePostAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ScheduledMessageResponse>> localVarResponse = await MessageSchedulePostWithHttpInfoAsync(smsMessage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Schedule an SMS message Schedules an SMS message to be sent at the date/time you specify
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ScheduledMessageResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ScheduledMessageResponse>>> MessageSchedulePostWithHttpInfoAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->MessageSchedulePost");

            var localVarPath = "/message/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessageSchedulePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ScheduledMessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ScheduledMessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ScheduledMessageResponse>)));
        }

        /// <summary>
        ///  Send an SMS Message
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>SendMessageResponse</returns>
        public SendMessageResponse MessageSendPost (Message smsMessage)
        {
             ApiResponse<SendMessageResponse> localVarResponse = MessageSendPostWithHttpInfo(smsMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Send an SMS Message
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        public ApiResponse<SendMessageResponse> MessageSendPostWithHttpInfo (Message smsMessage)
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->MessageSendPost");

            var localVarPath = "/message/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessageSendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        ///  Send an SMS Message
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendMessageResponse> MessageSendPostAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendMessageResponse> localVarResponse = await MessageSendPostWithHttpInfoAsync(smsMessage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Send an SMS Message
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smsMessage">Message properties</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> MessageSendPostWithHttpInfoAsync (Message smsMessage, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'smsMessage' is set
            if (smsMessage == null)
                throw new ApiException(400, "Missing required parameter 'smsMessage' when calling MessagesApi->MessageSendPost");

            var localVarPath = "/message/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smsMessage != null && smsMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smsMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smsMessage; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessageSendPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        ///  Retrieve failed messages matching your criteria
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>List&lt;MessageResponse&gt;</returns>
        public List<MessageResponse> MessagesFailedPost (Query query)
        {
             ApiResponse<List<MessageResponse>> localVarResponse = MessagesFailedPostWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve failed messages matching your criteria
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of List&lt;MessageResponse&gt;</returns>
        public ApiResponse<List<MessageResponse>> MessagesFailedPostWithHttpInfo (Query query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->MessagesFailedPost");

            var localVarPath = "/messages/failed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesFailedPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MessageResponse>)));
        }

        /// <summary>
        ///  Retrieve failed messages matching your criteria
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MessageResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MessageResponse>> MessagesFailedPostAsync (Query query, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MessageResponse>> localVarResponse = await MessagesFailedPostWithHttpInfoAsync(query, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve failed messages matching your criteria
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MessageResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MessageResponse>>> MessagesFailedPostWithHttpInfoAsync (Query query, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->MessagesFailedPost");

            var localVarPath = "/messages/failed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesFailedPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MessageResponse>)));
        }

        /// <summary>
        /// Retrieve unread uncoming messages Retrieve unread uncoming messages matching your criteria
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>List&lt;MessageResponse&gt;</returns>
        public List<MessageResponse> MessagesInboxPost (Query query)
        {
             ApiResponse<List<MessageResponse>> localVarResponse = MessagesInboxPostWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve unread uncoming messages Retrieve unread uncoming messages matching your criteria
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of List&lt;MessageResponse&gt;</returns>
        public ApiResponse<List<MessageResponse>> MessagesInboxPostWithHttpInfo (Query query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->MessagesInboxPost");

            var localVarPath = "/messages/inbox";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesInboxPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MessageResponse>)));
        }

        /// <summary>
        /// Retrieve unread uncoming messages Retrieve unread uncoming messages matching your criteria
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MessageResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MessageResponse>> MessagesInboxPostAsync (Query query, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MessageResponse>> localVarResponse = await MessagesInboxPostWithHttpInfoAsync(query, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve unread uncoming messages Retrieve unread uncoming messages matching your criteria
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MessageResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MessageResponse>>> MessagesInboxPostWithHttpInfoAsync (Query query, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->MessagesInboxPost");

            var localVarPath = "/messages/inbox";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesInboxPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MessageResponse>)));
        }

        /// <summary>
        ///  Delete the message with the matching messageid
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>DeletedMessageResponse</returns>
        public DeletedMessageResponse MessagesMessageidDelete (string messageid)
        {
             ApiResponse<DeletedMessageResponse> localVarResponse = MessagesMessageidDeleteWithHttpInfo(messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete the message with the matching messageid
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of DeletedMessageResponse</returns>
        public ApiResponse<DeletedMessageResponse> MessagesMessageidDeleteWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->MessagesMessageidDelete");

            var localVarPath = "/messages/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesMessageidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeletedMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedMessageResponse)));
        }

        /// <summary>
        ///  Delete the message with the matching messageid
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeletedMessageResponse</returns>
        public async System.Threading.Tasks.Task<DeletedMessageResponse> MessagesMessageidDeleteAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DeletedMessageResponse> localVarResponse = await MessagesMessageidDeleteWithHttpInfoAsync(messageid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Delete the message with the matching messageid
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeletedMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedMessageResponse>> MessagesMessageidDeleteWithHttpInfoAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->MessagesMessageidDelete");

            var localVarPath = "/messages/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesMessageidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeletedMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedMessageResponse)));
        }

        /// <summary>
        /// Get message by messageid Retrieve a delivery report by the message ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>MessageResponse</returns>
        public MessageResponse MessagesMessageidGet (string messageid)
        {
             ApiResponse<MessageResponse> localVarResponse = MessagesMessageidGetWithHttpInfo(messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get message by messageid Retrieve a delivery report by the message ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of MessageResponse</returns>
        public ApiResponse<MessageResponse> MessagesMessageidGetWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->MessagesMessageidGet");

            var localVarPath = "/messages/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesMessageidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageResponse)));
        }

        /// <summary>
        /// Get message by messageid Retrieve a delivery report by the message ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageResponse</returns>
        public async System.Threading.Tasks.Task<MessageResponse> MessagesMessageidGetAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageResponse> localVarResponse = await MessagesMessageidGetWithHttpInfoAsync(messageid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get message by messageid Retrieve a delivery report by the message ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageResponse>> MessagesMessageidGetWithHttpInfoAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->MessagesMessageidGet");

            var localVarPath = "/messages/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesMessageidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageResponse)));
        }

        /// <summary>
        /// Get messages matching your criteria Retrieve up to 1000 messages matching criteria specified in the request
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>List&lt;MessageResponse&gt;</returns>
        public List<MessageResponse> MessagesPost (Query query)
        {
             ApiResponse<List<MessageResponse>> localVarResponse = MessagesPostWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get messages matching your criteria Retrieve up to 1000 messages matching criteria specified in the request
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <returns>ApiResponse of List&lt;MessageResponse&gt;</returns>
        public ApiResponse<List<MessageResponse>> MessagesPostWithHttpInfo (Query query)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->MessagesPost");

            var localVarPath = "/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MessageResponse>)));
        }

        /// <summary>
        /// Get messages matching your criteria Retrieve up to 1000 messages matching criteria specified in the request
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;MessageResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MessageResponse>> MessagesPostAsync (Query query, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MessageResponse>> localVarResponse = await MessagesPostWithHttpInfoAsync(query, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get messages matching your criteria Retrieve up to 1000 messages matching criteria specified in the request
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MessageResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MessageResponse>>> MessagesPostWithHttpInfoAsync (Query query, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling MessagesApi->MessagesPost");

            var localVarPath = "/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MessageResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MessageResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MessageResponse>)));
        }

        /// <summary>
        /// Retrieve scheduled messages Return a list of messages scheduled from your account, comprising any messages scheduled in the last 3 months and any scheduled to send in the future
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ScheduledMessagesResponse</returns>
        public ScheduledMessagesResponse MessagesScheduleGet ()
        {
             ApiResponse<ScheduledMessagesResponse> localVarResponse = MessagesScheduleGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve scheduled messages Return a list of messages scheduled from your account, comprising any messages scheduled in the last 3 months and any scheduled to send in the future
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ScheduledMessagesResponse</returns>
        public ApiResponse<ScheduledMessagesResponse> MessagesScheduleGetWithHttpInfo ()
        {

            var localVarPath = "/messages/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesScheduleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScheduledMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledMessagesResponse)));
        }

        /// <summary>
        /// Retrieve scheduled messages Return a list of messages scheduled from your account, comprising any messages scheduled in the last 3 months and any scheduled to send in the future
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScheduledMessagesResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledMessagesResponse> MessagesScheduleGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ScheduledMessagesResponse> localVarResponse = await MessagesScheduleGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve scheduled messages Return a list of messages scheduled from your account, comprising any messages scheduled in the last 3 months and any scheduled to send in the future
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScheduledMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduledMessagesResponse>> MessagesScheduleGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/messages/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesScheduleGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScheduledMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledMessagesResponse)));
        }

        /// <summary>
        /// Cancel scheduled SMS message Cancels a scheduled SMS message matching the provided messageid
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>CancelledMessageResponse</returns>
        public CancelledMessageResponse MessagesScheduleMessageidDelete (string messageid)
        {
             ApiResponse<CancelledMessageResponse> localVarResponse = MessagesScheduleMessageidDeleteWithHttpInfo(messageid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel scheduled SMS message Cancels a scheduled SMS message matching the provided messageid
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <returns>ApiResponse of CancelledMessageResponse</returns>
        public ApiResponse<CancelledMessageResponse> MessagesScheduleMessageidDeleteWithHttpInfo (string messageid)
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->MessagesScheduleMessageidDelete");

            var localVarPath = "/messages/schedule/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesScheduleMessageidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelledMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelledMessageResponse)));
        }

        /// <summary>
        /// Cancel scheduled SMS message Cancels a scheduled SMS message matching the provided messageid
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CancelledMessageResponse</returns>
        public async System.Threading.Tasks.Task<CancelledMessageResponse> MessagesScheduleMessageidDeleteAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CancelledMessageResponse> localVarResponse = await MessagesScheduleMessageidDeleteWithHttpInfoAsync(messageid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel scheduled SMS message Cancels a scheduled SMS message matching the provided messageid
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageid">The ID of the message you would like returned</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CancelledMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CancelledMessageResponse>> MessagesScheduleMessageidDeleteWithHttpInfoAsync (string messageid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'messageid' is set
            if (messageid == null)
                throw new ApiException(400, "Missing required parameter 'messageid' when calling MessagesApi->MessagesScheduleMessageidDelete");

            var localVarPath = "/messages/schedule/{messageid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageid != null) localVarPathParams.Add("messageid", this.Configuration.ApiClient.ParameterToString(messageid)); // path parameter

            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesScheduleMessageidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CancelledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CancelledMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CancelledMessageResponse)));
        }

        /// <summary>
        /// Volume of messages sent since midnight Retrieve the number of messages sent since midnight last night
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MessageVolumeResponse</returns>
        public MessageVolumeResponse MessagesVolumeGet ()
        {
             ApiResponse<MessageVolumeResponse> localVarResponse = MessagesVolumeGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Volume of messages sent since midnight Retrieve the number of messages sent since midnight last night
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MessageVolumeResponse</returns>
        public ApiResponse<MessageVolumeResponse> MessagesVolumeGetWithHttpInfo ()
        {

            var localVarPath = "/messages/volume";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesVolumeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageVolumeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageVolumeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageVolumeResponse)));
        }

        /// <summary>
        /// Volume of messages sent since midnight Retrieve the number of messages sent since midnight last night
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessageVolumeResponse</returns>
        public async System.Threading.Tasks.Task<MessageVolumeResponse> MessagesVolumeGetAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessageVolumeResponse> localVarResponse = await MessagesVolumeGetWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Volume of messages sent since midnight Retrieve the number of messages sent since midnight last night
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessageVolumeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageVolumeResponse>> MessagesVolumeGetWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/messages/volume";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (JWT) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MessagesVolumeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageVolumeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageVolumeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageVolumeResponse)));
        }

    }
}
